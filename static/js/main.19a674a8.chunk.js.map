{"version":3,"sources":["services/StyledComponents.js","services/Stack.js","services/logicFuncs.js","components/App/styles.js","components/StacksMenu.js","components/VisualStack.js","components/StackCreate.js","components/StackOptions.js","components/MessageStack.js","components/App/index.js","index.js"],"names":["ScrollDiv","styled","props","outset","noScroll","padding","Stack","array","Array","fill","top","this","stack","size","length","value","isFull","isEmpty","validTypes","getIcon","type","getColor","Grid","GridItem","area","StacksMenu","stackCollection","handleStackChange","stackPos","dropdownOptions","map","index","icon","key","text","name","Dropdown","placeholder","fluid","selection","options","onChange","_","VisualStack","currentStack","color","copy","filter","el","mappedStack","Segment","padded","raised","inverted","secondary","textAlign","emptyStack","Message","floating","error","header","content","toUpperCase","Header","as","Icon","Content","Subheader","StackCreate","handleStackCreate","useState","modalOpen","setModalOpen","inputName","setInputName","inputType","setInputType","inputSize","setInputSize","onModalToggle","Fragment","Button","primary","labelPosition","onClick","animated","visible","hidden","Modal","dimmer","open","centered","Form","onSubmit","Input","label","circular","link","min","max","Number","Select","Group","negative","Or","positive","StackOptions","handleStackPush","handleStackPop","pushInput","setPushInput","onInputChange","input","MessageStack","collectedMessages","archivedMessages","handleMessageArchive","messageOpen","setMessageOpen","archiveOpen","setArchiveOpen","onClose","renderModal","button","scrolling","Description","floated","Actions","renderButton","len","callback","pointing","renderMessages","msg","success","head","body","messageStack","archiveStack","warning","widths","App","setCollectedMessages","setArchivedMessages","setStackPos","setStackCollection","useEffect","console","groupCollapsed","log","groupEnd","val","messages","test","some","newStack","push","pop","errors","toLowerCase","includes","isValidStackConfig","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.19a674a8.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const background = `#c1b8c1`;\r\nexport const backgroundGradient = `linear-gradient(145deg, #cfc5cf, #aea6ae)`;\r\n\r\nexport const outsetShadow = `13px 13px 35px #9c959c, -13px -13px 35px #e6dbe6`;\r\nexport const outsetBulgeShadow = `13px 13px 35px #9c959c, -13px -13px 35px #e6dbe6`;\r\nexport const insetShadow = `inset 13px 13px 35px #9c959c, inset -13px -13px 35px #e6dbe6`;\r\n\r\nexport const ScrollDiv = styled('div')`\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\r\n\tborder-radius: 10px;\r\n\tbackground: ${background};\r\n\tbox-shadow: ${props => (props.outset ? outsetShadow : insetShadow)};\r\n\r\n\toverflow-y: ${props => (props.noScroll ? 'visible' : 'scroll')};\r\n\tpadding: ${props => (props.padding ? props.padding * 100 : 4)}%;\r\n`;\r\n","class Stack {\r\n\tconstructor(array = new Array(10).fill(null), top = -1) {\r\n\t\tthis.stack = array;\r\n\t\tthis.size = array.length;\r\n\t\tthis.top = top;\r\n\t}\r\n\r\n\tisFull() {\r\n\t\treturn this.top === this.size - 1;\r\n\t}\r\n\r\n\tisEmpty() {\r\n\t\treturn this.top === -1;\r\n\t}\r\n\r\n\tpush(value) {\r\n\t\tif (!this.isFull()) {\r\n\t\t\tthis.stack[++this.top] = value;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpop() {\r\n\t\tif (!this.isEmpty()) {\r\n\t\t\tconst value = this.stack[this.top];\r\n\t\t\tthis.stack[this.top--] = null;\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tget copy() {\r\n\t\treturn [...this.stack];\r\n\t}\r\n}\r\n\r\nexport default Stack;\r\n","export const validTypes = ['number', 'string', 'boolean'];\r\n\r\nexport const isValidType = type => {\r\n\tif (validTypes.includes(type.toLowerCase())) return true;\r\n\treturn false;\r\n};\r\n\r\nexport const isValidPush = (val, type) => {\r\n\tconst NumberRegExp = /^(\\d)+(.(\\d)+)?$/i;\r\n\r\n\tif (type === 'number')\r\n\t\treturn NumberRegExp.test(val)\r\n\t\t\t? []\r\n\t\t\t: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thead: 'Invalid Input of Type Number',\r\n\t\t\t\t\t\tbody: 'Element to push should be a Number',\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t  ];\r\n\tif (type === 'boolean')\r\n\t\treturn val === 'true' || val === 'false'\r\n\t\t\t? []\r\n\t\t\t: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thead: 'Invalid Input of Type Boolean',\r\n\t\t\t\t\t\tbody: 'Element to push should be a Boolean',\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t  ];\r\n\tif (type === 'string')\r\n\t\treturn typeof val === 'string'\r\n\t\t\t? []\r\n\t\t\t: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thead: 'Invalid Input of Type String',\r\n\t\t\t\t\t\tbody: 'Element to push should be a String',\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t  ];\r\n};\r\n\r\nexport const isValidStackConfig = (name, type, size) => {\r\n\tconst errors = [];\r\n\tif (name.length <= 0 || name.length >= 20 || name.toLowerCase() === 'default') {\r\n\t\terrors.push({\r\n\t\t\thead: 'Invalid Name for a Stack',\r\n\t\t\tbody: 'Enter a Valid Name that is not \"Default\" or \"\"',\r\n\t\t\terror: true,\r\n\t\t});\r\n\t}\r\n\tif (!validTypes.includes(type)) {\r\n\t\terrors.push({\r\n\t\t\thead: 'Invlid Type for a Stack',\r\n\t\t\tbody: 'A Stack can only have a Type of Number, String or Boolean',\r\n\t\t\terror: true,\r\n\t\t});\r\n\t}\r\n\tif (size <= 0 || size >= 20) {\r\n\t\terrors.push({\r\n\t\t\thead: 'Invlid Size for a Stack',\r\n\t\t\tbody: 'Size of Stack cannot Exceed 20 and cannot be less than 0',\r\n\t\t\terror: true,\r\n\t\t});\r\n\t}\r\n\treturn errors;\r\n};\r\n\r\nexport const getIcon = type => {\r\n\tswitch (type) {\r\n\t\tcase 'number':\r\n\t\t\treturn 'sort numeric up';\r\n\t\tcase 'string':\r\n\t\t\treturn 'sort alphabet up';\r\n\t\tcase 'boolean':\r\n\t\t\treturn 'sort';\r\n\t\tdefault:\r\n\t\t\treturn 'delete';\r\n\t}\r\n};\r\n\r\nexport const getColor = type => {\r\n\tswitch (type) {\r\n\t\tcase 'number':\r\n\t\t\treturn 'orange';\r\n\t\tcase 'string':\r\n\t\t\treturn 'olive';\r\n\t\tcase 'boolean':\r\n\t\t\treturn 'teal';\r\n\t\tdefault:\r\n\t\t\treturn 'red';\r\n\t}\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Grid = styled('div')`\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tpadding: 0.2%;\r\n\tdisplay: grid;\r\n\tgrid-template-rows: repeat(9, 1fr) 0.5fr;\r\n\tgrid-template-columns: repeat(10, 1fr);\r\n\tgrid-gap: 2%;\r\n\tgrid-template-areas:\r\n\t\t'a a a a a a c c c c'\r\n\t\t'd d d d d d c c c c'\r\n\t\t'e e e e e e c c c c'\r\n\t\t'x x x x x x c c c c'\r\n\t\t'x x x x x x c c c c'\r\n\t\t'b b b b b b c c c c'\r\n\t\t'b b b b b b c c c c'\r\n\t\t'b b b b b b c c c c'\r\n\t\t'y y y y y y c c c c'\r\n\t\t'y y y y y y c c c c';\r\n`;\r\nexport const GridItem = styled('div')`\r\n\tgrid-area: ${({ area }) => area};\r\n`;\r\n","import React from 'react';\r\nimport { Dropdown } from 'semantic-ui-react';\r\n\r\nimport { getIcon } from '../services/logicFuncs';\r\nimport { ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst StacksMenu = ({ stackCollection, handleStackChange, stackPos }) => {\r\n\tconst dropdownOptions = stackCollection.map((stack, index) => {\r\n\t\tconst icon = getIcon(stack.type);\r\n\r\n\t\treturn {\r\n\t\t\tkey: index,\r\n\t\t\tvalue: index,\r\n\t\t\ttext: `${stack.name} < ${stack.type} >`,\r\n\t\t\ticon: icon,\r\n\t\t};\r\n\t});\r\n\r\n\tconst onStackChange = (_, { value }) => {\r\n\t\thandleStackChange(value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ScrollDiv noScroll outset>\r\n\t\t\t<Dropdown\r\n\t\t\t\tvalue={stackPos}\r\n\t\t\t\tplaceholder='Select a Stack'\r\n\t\t\t\tfluid\r\n\t\t\t\tselection\r\n\t\t\t\toptions={dropdownOptions}\r\n\t\t\t\tonChange={onStackChange}\r\n\t\t\t/>\r\n\t\t</ScrollDiv>\r\n\t);\r\n};\r\n\r\nexport default StacksMenu;\r\n","import React from 'react';\r\nimport { Segment, Message, Header, Icon } from 'semantic-ui-react';\r\n\r\nimport { getIcon, getColor } from '../services/logicFuncs';\r\nimport { ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst VisualStack = ({ currentStack }) => {\r\n\tconst icon = getIcon(currentStack.type);\r\n\tconst color = getColor(currentStack.type);\r\n\r\n\tconst stack = currentStack.stack.copy.filter(el => el !== null);\r\n\tconst mappedStack = stack.map((el, index) => {\r\n\t\treturn (\r\n\t\t\t<Segment\r\n\t\t\t\tkey={index}\r\n\t\t\t\tpadded\r\n\t\t\t\traised\r\n\t\t\t\tinverted\r\n\t\t\t\tsecondary\r\n\t\t\t\tcolor={color}\r\n\t\t\t\ttextAlign='center'\r\n\t\t\t>\r\n\t\t\t\t{el ? el : 'null'}\r\n\t\t\t</Segment>\r\n\t\t);\r\n\t});\r\n\tconst emptyStack = (\r\n\t\t<Message\r\n\t\t\tfloating\r\n\t\t\terror\r\n\t\t\tsize='small'\r\n\t\t\ticon='crosshairs'\r\n\t\t\theader='Empty Stack'\r\n\t\t\tcontent={`${currentStack.name.toUpperCase()} Stack is empty .`}\r\n\t\t/>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<ScrollDiv>\r\n\t\t\t<Header as='h2' color={color}>\r\n\t\t\t\t<Icon name={icon} />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\t{currentStack.name.toUpperCase()} Stack\r\n\t\t\t\t\t<Header.Subheader>Type : {currentStack.type}</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t{stack.length > 0 ? mappedStack : emptyStack}\r\n\t\t</ScrollDiv>\r\n\t);\r\n};\r\n\r\nexport default VisualStack;\r\n","import React, { useState } from 'react';\r\nimport { Icon, Button, Form, Modal } from 'semantic-ui-react';\r\n\r\nimport { ScrollDiv } from '../services/StyledComponents';\r\nimport { getIcon, getColor, validTypes } from '../services/logicFuncs';\r\n\r\nconst StackCreate = ({ handleStackCreate }) => {\r\n\tconst [modalOpen, setModalOpen] = useState(false);\r\n\tconst [inputName, setInputName] = useState('');\r\n\tconst [inputType, setInputType] = useState(0);\r\n\tconst [inputSize, setInputSize] = useState(5);\r\n\r\n\tconst icon = getIcon(validTypes[inputType]);\r\n\tconst color = getColor(validTypes[inputType]);\r\n\tconst options = validTypes.map((type, index) => ({\r\n\t\tkey: index,\r\n\t\tvalue: index,\r\n\t\ttext: type.toUpperCase(),\r\n\t}));\r\n\r\n\tconst onModalToggle = () => {\r\n\t\tsetModalOpen(!modalOpen);\r\n\t};\r\n\r\n\tconst onNameChange = (_, { value }) => {\r\n\t\tsetInputName(value);\r\n\t};\r\n\r\n\tconst onTypeChange = (_, { value }) => {\r\n\t\tsetInputType(value);\r\n\t};\r\n\r\n\tconst onSizeChange = (_, { value }) => {\r\n\t\tsetInputSize(Number(value));\r\n\t};\r\n\r\n\tconst onStackSubmit = () => {\r\n\t\thandleStackCreate(inputName, validTypes[inputType], inputSize);\r\n\t\tsetModalOpen(false);\r\n\t\tsetInputName('');\r\n\t\tsetInputType(0);\r\n\t\tsetInputSize(5);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<ScrollDiv noScroll>\r\n\t\t\t\t<Button\r\n\t\t\t\t\ticon\r\n\t\t\t\t\tfluid\r\n\t\t\t\t\tprimary\r\n\t\t\t\t\tlabelPosition='right'\r\n\t\t\t\t\tonClick={onModalToggle}\r\n\t\t\t\t\tanimated='fade'\r\n\t\t\t\t>\r\n\t\t\t\t\t<Icon name='upload' />\r\n\t\t\t\t\t<Button.Content visible>Create an Empty Stack</Button.Content>\r\n\t\t\t\t\t<Button.Content hidden>\r\n\t\t\t\t\t\tClick Here to Create a New Empty Stack\r\n\t\t\t\t\t</Button.Content>\r\n\t\t\t\t</Button>\r\n\t\t\t</ScrollDiv>\r\n\t\t\t<Modal dimmer='blurring' open={modalOpen} centered={false}>\r\n\t\t\t\t<Modal.Header>Stack Creation Form</Modal.Header>\r\n\t\t\t\t<Modal.Content>\r\n\t\t\t\t\t<Form onSubmit={onStackSubmit}>\r\n\t\t\t\t\t\t<Form.Input\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tvalue={inputName}\r\n\t\t\t\t\t\t\tfluid\r\n\t\t\t\t\t\t\tlabel='Stack Name'\r\n\t\t\t\t\t\t\tplaceholder='Enter a Stack Name ...'\r\n\t\t\t\t\t\t\ticon={<Icon name={icon} color={color} inverted circular link />}\r\n\t\t\t\t\t\t\tonChange={onNameChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Form.Input\r\n\t\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\tmax={20}\r\n\t\t\t\t\t\t\tvalue={inputSize}\r\n\t\t\t\t\t\t\tfluid\r\n\t\t\t\t\t\t\tlabel='Stack Size'\r\n\t\t\t\t\t\t\tplaceholder='Enter the Size of Stack ...'\r\n\t\t\t\t\t\t\tonChange={onSizeChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Form.Select\r\n\t\t\t\t\t\t\tvalue={inputType}\r\n\t\t\t\t\t\t\toptions={options}\r\n\t\t\t\t\t\t\tonChange={onTypeChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button.Group fluid>\r\n\t\t\t\t\t\t\t<Button type='button' negative onClick={onModalToggle}>\r\n\t\t\t\t\t\t\t\tClose\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button.Or />\r\n\t\t\t\t\t\t\t<Button type='submit' positive>\r\n\t\t\t\t\t\t\t\tCreate\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Button.Group>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</Modal.Content>\r\n\t\t\t</Modal>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default StackCreate;\r\n","import React, { useState } from 'react';\r\nimport { Form, Icon, Button } from 'semantic-ui-react';\r\n\r\nimport { ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst StackOptions = ({ currentStack, handleStackPush, handleStackPop }) => {\r\n\tconst [pushInput, setPushInput] = useState('');\r\n\r\n\tconst onInputChange = (_, { value }) => {\r\n\t\tsetPushInput(value);\r\n\t};\r\n\r\n\tconst onStackPush = () => {\r\n\t\thandleStackPush(pushInput);\r\n\t\tsetPushInput('');\r\n\t};\r\n\r\n\tconst onStackPop = () => {\r\n\t\thandleStackPop();\r\n\t\tsetPushInput('');\r\n\t};\r\n\r\n\tconst input =\r\n\t\tcurrentStack.type === 'boolean' ? (\r\n\t\t\t<Form.Select\r\n\t\t\t\tfluid\r\n\t\t\t\tvalue={pushInput}\r\n\t\t\t\tlabel='Push into Current Stack'\r\n\t\t\t\tplaceholder='Choosea Boolean Value'\r\n\t\t\t\toptions={[\r\n\t\t\t\t\t{ key: 0, text: 'TRUE', value: 'true' },\r\n\t\t\t\t\t{ key: 1, text: 'FALSE', value: 'false' },\r\n\t\t\t\t]}\r\n\t\t\t\tonChange={onInputChange}\r\n\t\t\t/>\r\n\t\t) : (\r\n\t\t\t<Form.Input\r\n\t\t\t\tfluid\r\n\t\t\t\tvalue={pushInput}\r\n\t\t\t\ttype={currentStack.type === 'number' ? 'number' : 'text'}\r\n\t\t\t\tlabel='Push into Current Stack'\r\n\t\t\t\tplaceholder='Enter an element ...'\r\n\t\t\t\ticon={<Icon name='inbox' color='violet' inverted circular link />}\r\n\t\t\t\tonChange={onInputChange}\r\n\t\t\t/>\r\n\t\t);\r\n\r\n\treturn (\r\n\t\t<ScrollDiv noScroll outset>\r\n\t\t\t<Form onSubmit={onStackPush}>\r\n\t\t\t\t{input}\r\n\t\t\t\t<Button.Group fluid>\r\n\t\t\t\t\t<Button negative type='button' onClick={onStackPop}>\r\n\t\t\t\t\t\tPop\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button.Or />\r\n\t\t\t\t\t<Button type='submit' positive>\r\n\t\t\t\t\t\tPush\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Button.Group>\r\n\t\t\t</Form>\r\n\t\t</ScrollDiv>\r\n\t);\r\n};\r\n\r\nexport default StackOptions;\r\n","import React, { useState } from 'react';\r\nimport { Message, Header, Modal, Button, Icon } from 'semantic-ui-react';\r\n\r\nimport { ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst MessageStack = ({\r\n\tcollectedMessages,\r\n\tarchivedMessages,\r\n\thandleMessageArchive,\r\n}) => {\r\n\tconst [messageOpen, setMessageOpen] = useState(false);\r\n\tconst [archiveOpen, setArchiveOpen] = useState(false);\r\n\r\n\tconst onClose = () => {\r\n\t\tsetMessageOpen(false);\r\n\t\tsetArchiveOpen(false);\r\n\t};\r\n\r\n\tconst onMessageOpen = () => {\r\n\t\tsetMessageOpen(true);\r\n\t\tsetArchiveOpen(false);\r\n\t};\r\n\r\n\tconst onArchiveOpen = () => {\r\n\t\tsetMessageOpen(false);\r\n\t\tsetArchiveOpen(true);\r\n\t};\r\n\r\n\tconst onMessageArchive = () => {\r\n\t\thandleMessageArchive();\r\n\t\tonClose();\r\n\t};\r\n\r\n\tconst renderModal = (open, stack, header, content, button = null) => (\r\n\t\t<Modal open={open} centered={false}>\r\n\t\t\t<Modal.Header>{header}</Modal.Header>\r\n\t\t\t<Modal.Content scrolling>\r\n\t\t\t\t<Modal.Description>\r\n\t\t\t\t\t<Header floated='right' size='small'>\r\n\t\t\t\t\t\t{content}\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t\t{stack.length > 0 ? stack : emptyStack}\r\n\t\t\t\t</Modal.Description>\r\n\t\t\t</Modal.Content>\r\n\t\t\t<Modal.Actions>\r\n\t\t\t\t{button}\r\n\t\t\t\t<Button onClick={onClose} negative>\r\n\t\t\t\t\tClose\r\n\t\t\t\t</Button>\r\n\t\t\t</Modal.Actions>\r\n\t\t</Modal>\r\n\t);\r\n\r\n\tconst renderButton = (color, icon, content, len, callback) => (\r\n\t\t<Button\r\n\t\t\tcolor={color}\r\n\t\t\tcontent={content}\r\n\t\t\ticon={icon}\r\n\t\t\tlabel={{\r\n\t\t\t\tcolor,\r\n\t\t\t\tpointing: 'left',\r\n\t\t\t\tcontent: len,\r\n\t\t\t}}\r\n\t\t\tonClick={callback}\r\n\t\t/>\r\n\t);\r\n\r\n\tconst renderMessages = stack =>\r\n\t\tstack.map((msg, index) => (\r\n\t\t\t<Message\r\n\t\t\t\tkey={index}\r\n\t\t\t\terror={msg.error === true}\r\n\t\t\t\tsuccess={msg.error !== true}\r\n\t\t\t\tsize='small'\r\n\t\t\t\ticon={msg.error === true ? 'question' : 'star'}\r\n\t\t\t\theader={msg.head}\r\n\t\t\t\tcontent={msg.body}\r\n\t\t\t/>\r\n\t\t));\r\n\r\n\tconst messageStack = renderMessages(collectedMessages);\r\n\tconst archiveStack = renderMessages(archivedMessages);\r\n\tconst emptyStack = (\r\n\t\t<Message\r\n\t\t\twarning\r\n\t\t\ticon='inbox'\r\n\t\t\tsize='small'\r\n\t\t\theader='No Messages Found'\r\n\t\t\tcontent='No new Messages are found'\r\n\t\t/>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<ScrollDiv noScroll>\r\n\t\t\t\t<Button.Group widths='2'>\r\n\t\t\t\t\t{renderButton(\r\n\t\t\t\t\t\t'red',\r\n\t\t\t\t\t\t'fork',\r\n\t\t\t\t\t\t'Current Messages',\r\n\t\t\t\t\t\tmessageStack.length,\r\n\t\t\t\t\t\tonMessageOpen\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{renderButton(\r\n\t\t\t\t\t\t'green',\r\n\t\t\t\t\t\t'inbox',\r\n\t\t\t\t\t\t'Messages Archived',\r\n\t\t\t\t\t\tarchiveStack.length,\r\n\t\t\t\t\t\tonArchiveOpen\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Button.Group>\r\n\t\t\t</ScrollDiv>\r\n\r\n\t\t\t{renderModal(\r\n\t\t\t\tmessageOpen,\r\n\t\t\t\tmessageStack,\r\n\t\t\t\t'Current Messages Collected',\r\n\t\t\t\t'Check out all the Current Messages',\r\n\t\t\t\t<Button icon primary labelPosition='right' onClick={onMessageArchive}>\r\n\t\t\t\t\t<Icon name='chevron right' />\r\n\t\t\t\t\tArchive all the messages\r\n\t\t\t\t</Button>\r\n\t\t\t)}\r\n\t\t\t{renderModal(\r\n\t\t\t\tarchiveOpen,\r\n\t\t\t\tarchiveStack,\r\n\t\t\t\t'All Messages Archived',\r\n\t\t\t\t'Check out all the Archived Messages'\r\n\t\t\t)}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default MessageStack;\r\n","import React, { useState, useEffect } from 'react';\n\nimport Stack from '../../services/Stack';\nimport { isValidStackConfig, isValidPush } from '../../services/logicFuncs';\n\nimport { Grid, GridItem } from './styles';\nimport StackMenu from '../StacksMenu';\nimport VisualStack from '../VisualStack';\nimport StackCreate from '../StackCreate';\nimport StackOptions from '../StackOptions';\nimport MessageStack from '../MessageStack';\n\nconst App = () => {\n\tconst [collectedMessages, setCollectedMessages] = useState([]);\n\tconst [archivedMessages, setArchivedMessages] = useState([]);\n\tconst [stackPos, setStackPos] = useState(0);\n\tconst [stackCollection, setStackCollection] = useState([\n\t\t{\n\t\t\tname: 'Default',\n\t\t\ttype: 'number',\n\t\t\tstack: new Stack(),\n\t\t},\n\t\t{\n\t\t\tname: 'Default',\n\t\t\ttype: 'string',\n\t\t\tstack: new Stack(),\n\t\t},\n\t\t{\n\t\t\tname: 'Default',\n\t\t\ttype: 'boolean',\n\t\t\tstack: new Stack(),\n\t\t},\n\t]);\n\n\tuseEffect(() => {\n\t\tconsole.groupCollapsed('Current Stack Config ...');\n\t\tconsole.log('Current Position :\\t', stackPos);\n\t\tconsole.log(stackCollection[stackPos]);\n\t\tconsole.groupEnd();\n\t}, [stackCollection, stackPos]);\n\n\tconst handleStackChange = index => {\n\t\tsetStackPos(index);\n\t};\n\n\tconst handleStackCreate = (name, type, size) => {\n\t\tconst messages = isValidStackConfig(name, type, size);\n\t\tif (messages.some(msg => msg.error === true)) {\n\t\t\tsetCollectedMessages([...collectedMessages, ...messages]);\n\t\t} else {\n\t\t\tsetStackCollection([\n\t\t\t\t...stackCollection,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t\tstack: new Stack(new Array(size).fill(null)),\n\t\t\t\t},\n\t\t\t]);\n\t\t\tsetCollectedMessages([\n\t\t\t\t...collectedMessages,\n\t\t\t\t{\n\t\t\t\t\thead: 'Stack Created Successfully',\n\t\t\t\t\tbody: `Created Stack ${name.toUpperCase()} of Type < ${type} >`,\n\t\t\t\t\terror: false,\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\t};\n\n\tconst handleStackPush = value => {\n\t\tconst messages = isValidPush(value, stackCollection[stackPos].type);\n\t\tif (messages.some(msg => msg.error === true)) {\n\t\t\tsetCollectedMessages([...collectedMessages, ...messages]);\n\t\t} else {\n\t\t\tconst newStack = new Stack(\n\t\t\t\tstackCollection[stackPos].stack.copy,\n\t\t\t\tstackCollection[stackPos].stack.top\n\t\t\t);\n\t\t\tif (newStack.push(value) === false) {\n\t\t\t\tsetCollectedMessages([\n\t\t\t\t\t...collectedMessages,\n\t\t\t\t\t{\n\t\t\t\t\t\thead: 'Stack is Full',\n\t\t\t\t\t\tbody: 'Cannot Push any more elements.',\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tsetStackCollection(\n\t\t\t\t\tstackCollection.map((el, index) => {\n\t\t\t\t\t\tif (index !== stackPos) return el;\n\t\t\t\t\t\treturn { ...el, stack: newStack };\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tsetCollectedMessages([\n\t\t\t\t\t...collectedMessages,\n\t\t\t\t\t{\n\t\t\t\t\t\thead: 'Element Pushed Successfully',\n\t\t\t\t\t\tbody: `Pushed element : ${value}`,\n\t\t\t\t\t\terror: false,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleStackPop = () => {\n\t\tconst newStack = new Stack(\n\t\t\tstackCollection[stackPos].stack.copy,\n\t\t\tstackCollection[stackPos].stack.top\n\t\t);\n\t\tconst value = newStack.pop();\n\t\tif (value === null) {\n\t\t\tsetCollectedMessages([\n\t\t\t\t...collectedMessages,\n\t\t\t\t{\n\t\t\t\t\thead: 'Stack is Empty',\n\t\t\t\t\tbody: 'Cannot Pop any more elements.',\n\t\t\t\t\terror: true,\n\t\t\t\t},\n\t\t\t]);\n\t\t} else {\n\t\t\tsetStackCollection(\n\t\t\t\tstackCollection.map((el, index) => {\n\t\t\t\t\tif (index !== stackPos) return el;\n\t\t\t\t\treturn { ...el, stack: newStack };\n\t\t\t\t})\n\t\t\t);\n\t\t\tsetCollectedMessages([\n\t\t\t\t...collectedMessages,\n\t\t\t\t{\n\t\t\t\t\thead: 'Element Popped Successfully',\n\t\t\t\t\tbody: `Popped element : ${value}`,\n\t\t\t\t\terror: false,\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\t};\n\n\tconst handleMessageArchive = () => {\n\t\tsetArchivedMessages([...archivedMessages, ...collectedMessages]);\n\t\tsetCollectedMessages([]);\n\t};\n\n\treturn (\n\t\t<Grid>\n\t\t\t<GridItem area='a'>\n\t\t\t\t<StackMenu\n\t\t\t\t\tstackPos={stackPos}\n\t\t\t\t\tstackCollection={stackCollection}\n\t\t\t\t\thandleStackChange={handleStackChange}\n\t\t\t\t/>\n\t\t\t</GridItem>\n\t\t\t<GridItem area='b'>\n\t\t\t\t<StackOptions\n\t\t\t\t\tcurrentStack={stackCollection[stackPos]}\n\t\t\t\t\thandleStackPush={handleStackPush}\n\t\t\t\t\thandleStackPop={handleStackPop}\n\t\t\t\t/>\n\t\t\t</GridItem>\n\t\t\t<GridItem area='c'>\n\t\t\t\t<VisualStack currentStack={stackCollection[stackPos]} />\n\t\t\t</GridItem>\n\t\t\t<GridItem area='d'>\n\t\t\t\t<StackCreate handleStackCreate={handleStackCreate} />\n\t\t\t</GridItem>\n\t\t\t<GridItem area='e'>\n\t\t\t\t<MessageStack\n\t\t\t\t\tcollectedMessages={collectedMessages}\n\t\t\t\t\tarchivedMessages={archivedMessages}\n\t\t\t\t\thandleMessageArchive={handleMessageArchive}\n\t\t\t\t/>\n\t\t\t</GridItem>\n\t\t</Grid>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { background } from './services/StyledComponents';\n\nimport App from './components/App';\n\nconst GlobalStyle = createGlobalStyle`\n   * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n   }\n\n   body {\n      width: 100vw;\n      height: 100vh;\n   }\n\n   #root {\n      width: 100%;\n      height: 100%;\n      padding: 10px;\n      background: ${background};\n   }\n`;\n\nReactDOM.render(\n\t<React.Fragment>\n\t\t<GlobalStyle />\n\t\t<App />\n\t</React.Fragment>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}