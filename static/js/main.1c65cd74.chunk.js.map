{"version":3,"sources":["services/Stack.js","services/logicFuncs.js","services/StyledComponents.js","components/App/styles.js","components/StacksMenu.js","components/VisualStack.js","components/StackCreate/StackCreate.presentation.js","components/StackCreate/index.js","components/StackOptions.js","components/MessagesStack/MessagesStack.presentation.js","components/MessagesStack/index.js","components/App/index.js","index.js"],"names":["Stack","array","Array","fill","top","this","stack","size","length","value","isFull","isEmpty","validTypes","getIcon","type","getColor","ScrollDiv","styled","props","outset","noScroll","padding","StyledButton","Button","Grid","GridItem","area","StacksMenu","stackCollection","handleStackChange","stackPos","dropdownOptions","map","index","icon","key","text","name","Header","Icon","Content","Subheader","Dropdown","placeholder","fluid","selection","options","onChange","_","VisualStack","currentStack","color","copy","filter","el","reverse","mappedStack","Segment","raised","inverted","secondary","textAlign","emptyStack","Message","floating","error","header","content","toUpperCase","as","StackCreatePresentation","modalOpen","inputName","inputType","inputSize","onModalToggle","onNameChange","onTypeChange","onSizeChange","onStackSubmit","Fragment","labelPosition","onClick","Modal","dimmer","open","centered","Form","onSubmit","Input","label","circular","link","min","max","Select","Group","negative","Or","positive","StackCreate","handleStackCreate","useState","setModalOpen","setInputName","setInputType","setInputSize","handleEvents","Number","StackOptions","inputDesign","handleStackPush","handleStackPop","pushInput","setPushInput","onInputChange","loading","widths","MessagesStackPresentation","messageStack","archiveStack","messageOpen","archiveOpen","onClose","onMessageOpen","onArchiveOpen","onMessageArchive","floated","basic","pointing","scrolling","Description","Actions","primary","MessageStack","collectedMessages","archivedMessages","handleMessageArchive","setMessageOpen","setArchiveOpen","renderMessages","msg","success","head","body","warning","App","setCollectedMessages","setArchivedMessages","setStackPos","setStackCollection","useEffect","console","groupCollapsed","log","groupEnd","val","messages","test","some","newStack","push","pop","errors","toLowerCase","includes","isValidStackConfig","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c65cd74.chunk.js","sourcesContent":["class Stack {\r\n\tconstructor(array = new Array(10).fill(null), top = -1) {\r\n\t\tthis.stack = array;\r\n\t\tthis.size = array.length;\r\n\t\tthis.top = top;\r\n\t}\r\n\r\n\tisFull() {\r\n\t\treturn this.top === this.size - 1;\r\n\t}\r\n\r\n\tisEmpty() {\r\n\t\treturn this.top === -1;\r\n\t}\r\n\r\n\tpush(value) {\r\n\t\tif (!this.isFull()) {\r\n\t\t\tthis.stack[++this.top] = value;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpop() {\r\n\t\tif (!this.isEmpty()) {\r\n\t\t\tconst value = this.stack[this.top];\r\n\t\t\tthis.stack[this.top--] = null;\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tget copy() {\r\n\t\treturn [...this.stack];\r\n\t}\r\n}\r\n\r\nexport default Stack;\r\n","export const validTypes = ['number', 'string', 'boolean'];\r\n\r\nexport const isValidType = type => {\r\n\tif (validTypes.includes(type.toLowerCase())) return true;\r\n\treturn false;\r\n};\r\n\r\nexport const isValidPush = (val, type) => {\r\n\tconst NumberRegExp = /^(\\d)+(.(\\d)+)?$/i;\r\n\r\n\tif (type === 'number')\r\n\t\treturn NumberRegExp.test(val)\r\n\t\t\t? []\r\n\t\t\t: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thead: 'Invalid Input of Type Number',\r\n\t\t\t\t\t\tbody: 'Element to push should be a Number',\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t  ];\r\n\tif (type === 'boolean')\r\n\t\treturn val === 'true' || val === 'false'\r\n\t\t\t? []\r\n\t\t\t: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thead: 'Invalid Input of Type Boolean',\r\n\t\t\t\t\t\tbody: 'Element to push should be a Boolean',\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t  ];\r\n\tif (type === 'string')\r\n\t\treturn typeof val === 'string'\r\n\t\t\t? []\r\n\t\t\t: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thead: 'Invalid Input of Type String',\r\n\t\t\t\t\t\tbody: 'Element to push should be a String',\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t  ];\r\n};\r\n\r\nexport const isValidStackConfig = (name, type, size) => {\r\n\tconst errors = [];\r\n\tif (name.length <= 0 || name.length >= 20 || name.toLowerCase() === 'default') {\r\n\t\terrors.push({\r\n\t\t\thead: 'Invalid Name for a Stack',\r\n\t\t\tbody: 'Enter a Valid Name that is not \"Default\" or \"\"',\r\n\t\t\terror: true,\r\n\t\t});\r\n\t}\r\n\tif (!validTypes.includes(type)) {\r\n\t\terrors.push({\r\n\t\t\thead: 'Invlid Type for a Stack',\r\n\t\t\tbody: 'A Stack can only have a Type of Number, String or Boolean',\r\n\t\t\terror: true,\r\n\t\t});\r\n\t}\r\n\tif (size <= 0 || size >= 20) {\r\n\t\terrors.push({\r\n\t\t\thead: 'Invlid Size for a Stack',\r\n\t\t\tbody: 'Size of Stack cannot Exceed 20 and cannot be less than 0',\r\n\t\t\terror: true,\r\n\t\t});\r\n\t}\r\n\treturn errors;\r\n};\r\n\r\nexport const getIcon = type => {\r\n\tswitch (type) {\r\n\t\tcase 'number':\r\n\t\t\treturn 'sort numeric up';\r\n\t\tcase 'string':\r\n\t\t\treturn 'sort alphabet up';\r\n\t\tcase 'boolean':\r\n\t\t\treturn 'sort';\r\n\t\tdefault:\r\n\t\t\treturn 'delete';\r\n\t}\r\n};\r\n\r\nexport const getColor = type => {\r\n\tswitch (type) {\r\n\t\tcase 'number':\r\n\t\t\treturn 'orange';\r\n\t\tcase 'string':\r\n\t\t\treturn 'green';\r\n\t\tcase 'boolean':\r\n\t\t\treturn 'blue';\r\n\t\tdefault:\r\n\t\t\treturn 'red';\r\n\t}\r\n};\r\n","import styled from 'styled-components';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nexport const background = `#c1b8c1`;\r\nexport const backgroundHover = `#c6bec7`;\r\n\r\nexport const outsetShadow = `13px 13px 35px #9c959c, -13px -13px 35px #e6dbe6`;\r\nexport const insetShadow = `inset 13px 13px 35px #9c959c, inset -13px -13px 35px #e6dbe6`;\r\n\r\nexport const outsetShadowIntense = `5px 5px 21px #615c61, -5px -5px 21px #ffffff`;\r\nexport const insetShadowIntense = `inset 5px 5px 21px #615c61, inset -5px -5px 21px #ffffff`;\r\n\r\nexport const ScrollDiv = styled('div')`\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\r\n\tborder-radius: 10px;\r\n\tbackground: ${background};\r\n\tbox-shadow: ${props => (props.outset ? outsetShadow : insetShadow)};\r\n\r\n\toverflow-y: ${props => (props.noScroll ? 'visible' : 'scroll')};\r\n\tpadding: ${props => (props.padding ? props.padding * 100 : 3)}%;\r\n`;\r\n\r\nexport const StyledButton = styled(Button)`\r\n\tborder-radius: 5px !important;\r\n\tcolor: black !important;\r\n\tbackground: ${background} !important;\r\n\tbox-shadow: ${outsetShadowIntense} !important;\r\n\r\n\t&:hover {\r\n\t\tbackground: ${backgroundHover} !important;\r\n\t}\r\n\r\n\t&:active {\r\n\t\tbox-shadow: ${insetShadowIntense} !important;\r\n\t}\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nimport { background } from '../../services/StyledComponents';\r\n\r\nexport const Grid = styled('div')`\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tbackground: ${background};\r\n\tpadding: 1%;\r\n\tdisplay: grid;\r\n\tgrid-template-rows: repeat(10, 1fr);\r\n\tgrid-template-columns: repeat(10, 1fr);\r\n\tgrid-gap: 1.5%;\r\n\tgrid-template-areas:\r\n\t\t'a a a a a a d d d d'\r\n\t\t'a a a a a a d d d d'\r\n\t\t'x x x x x x c c c c'\r\n\t\t'b b b b b b c c c c'\r\n\t\t'b b b b b b c c c c'\r\n\t\t'b b b b b b c c c c'\r\n\t\t'y y y y y y c c c c'\r\n\t\t'e e e e e e c c c c'\r\n\t\t'e e e e e e c c c c'\r\n\t\t'z z z z z z z z z z';\r\n\r\n\t@media (max-width: 800px) {\r\n\t\theight: 200%;\r\n\t\tbackground-size: 100% 250%;\r\n\t\tpadding: 1%;\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-rows: repeat(16, 1fr);\r\n\t\tgrid-template-columns: repeat(1, 1fr);\r\n\t\tgrid-gap: 1%;\r\n\t\tgrid-template-areas:\r\n\t\t\t'a'\r\n\t\t\t'a'\r\n\t\t\t'c'\r\n\t\t\t'c'\r\n\t\t\t'c'\r\n\t\t\t'c'\r\n\t\t\t'x'\r\n\t\t\t'd'\r\n\t\t\t'd'\r\n\t\t\t'b'\r\n\t\t\t'b'\r\n\t\t\t'b'\r\n\t\t\t'y'\r\n\t\t\t'e'\r\n\t\t\t'e'\r\n\t\t\t'z';\r\n\t}\r\n`;\r\nexport const GridItem = styled('div')`\r\n\tgrid-area: ${({ area }) => area};\r\n`;\r\n","import React from 'react';\r\nimport { Dropdown, Header, Icon } from 'semantic-ui-react';\r\n\r\nimport { getIcon } from '../services/logicFuncs';\r\nimport { ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst StacksMenu = ({ stackCollection, handleStackChange, stackPos }) => {\r\n\tconst dropdownOptions = stackCollection.map((stack, index) => {\r\n\t\tconst icon = getIcon(stack.type);\r\n\r\n\t\treturn {\r\n\t\t\tkey: index,\r\n\t\t\tvalue: index,\r\n\t\t\ttext: `${stack.name} < ${stack.type} >`,\r\n\t\t\ticon: icon,\r\n\t\t};\r\n\t});\r\n\r\n\tconst onStackChange = (_, { value }) => {\r\n\t\thandleStackChange(value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ScrollDiv noScroll outset>\r\n\t\t\t<Header size='small'>\r\n\t\t\t\t<Icon name='outdent' />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\tChoose a Stack\r\n\t\t\t\t\t<Header.Subheader>Choose one out of the following Stacks</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t<Dropdown\r\n\t\t\t\tvalue={stackPos}\r\n\t\t\t\tplaceholder='Select a Stack'\r\n\t\t\t\tfluid\r\n\t\t\t\tselection\r\n\t\t\t\toptions={dropdownOptions}\r\n\t\t\t\tonChange={onStackChange}\r\n\t\t\t/>\r\n\t\t</ScrollDiv>\r\n\t);\r\n};\r\n\r\nexport default StacksMenu;\r\n","import React from 'react';\r\nimport { Segment, Message, Header, Icon } from 'semantic-ui-react';\r\n\r\nimport { getIcon, getColor } from '../services/logicFuncs';\r\nimport { ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst VisualStack = ({ currentStack }) => {\r\n\tconst icon = getIcon(currentStack.type);\r\n\tconst color = getColor(currentStack.type);\r\n\r\n\tconst stack = currentStack.stack.copy.filter(el => el !== null).reverse();\r\n\tconst mappedStack = stack.map((el, index) => {\r\n\t\treturn (\r\n\t\t\t<Segment\r\n\t\t\t\tkey={index}\r\n\t\t\t\traised\r\n\t\t\t\tinverted\r\n\t\t\t\tsecondary\r\n\t\t\t\tcolor={color}\r\n\t\t\t\ttextAlign='center'\r\n\t\t\t>\r\n\t\t\t\t{el ? el : 'null'}\r\n\t\t\t</Segment>\r\n\t\t);\r\n\t});\r\n\tconst emptyStack = (\r\n\t\t<Message\r\n\t\t\tfloating\r\n\t\t\terror\r\n\t\t\tsize='small'\r\n\t\t\ticon='crosshairs'\r\n\t\t\theader='Empty Stack'\r\n\t\t\tcontent={`${currentStack.name.toUpperCase()} Stack is empty .`}\r\n\t\t/>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<ScrollDiv>\r\n\t\t\t<Header as='h2' color={color}>\r\n\t\t\t\t<Icon name={icon} />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\t{currentStack.name.toUpperCase()} Stack\r\n\t\t\t\t\t<Header.Subheader>Type : {currentStack.type}</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t{stack.length > 0 ? mappedStack : emptyStack}\r\n\t\t</ScrollDiv>\r\n\t);\r\n};\r\n\r\nexport default VisualStack;\r\n","import React from 'react';\r\nimport { Icon, Button, Form, Modal, Header } from 'semantic-ui-react';\r\n\r\nimport { StyledButton, ScrollDiv } from '../../services/StyledComponents';\r\n\r\nconst StackCreatePresentation = ({\r\n\tmodalOpen,\r\n\tinputName,\r\n\tinputType,\r\n\tinputSize,\r\n\ticon,\r\n\tcolor,\r\n\toptions,\r\n\tonModalToggle,\r\n\tonNameChange,\r\n\tonTypeChange,\r\n\tonSizeChange,\r\n\tonStackSubmit,\r\n}) => (\r\n\t<React.Fragment>\r\n\t\t<ScrollDiv noScroll>\r\n\t\t\t<Header size='small'>\r\n\t\t\t\t<Icon name='paper plane' />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\tCreate a New Stack\r\n\t\t\t\t\t<Header.Subheader>Initialise an Empty Stack with a Name</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t<StyledButton icon fluid labelPosition='right' onClick={onModalToggle}>\r\n\t\t\t\t<Icon name='upload' />\r\n\t\t\t\tCreate an Empty Stack\r\n\t\t\t</StyledButton>\r\n\t\t</ScrollDiv>\r\n\t\t<Modal dimmer='blurring' open={modalOpen} centered={false}>\r\n\t\t\t<Modal.Header>Stack Creation Form</Modal.Header>\r\n\t\t\t<Modal.Content>\r\n\t\t\t\t<Form onSubmit={onStackSubmit}>\r\n\t\t\t\t\t<Form.Input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tvalue={inputName}\r\n\t\t\t\t\t\tfluid\r\n\t\t\t\t\t\tlabel='Stack Name'\r\n\t\t\t\t\t\tplaceholder='Enter a Stack Name ...'\r\n\t\t\t\t\t\ticon={<Icon name={icon} color={color} inverted circular link />}\r\n\t\t\t\t\t\tonChange={onNameChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Form.Input\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\tmax={20}\r\n\t\t\t\t\t\tvalue={inputSize}\r\n\t\t\t\t\t\tfluid\r\n\t\t\t\t\t\tlabel='Stack Size'\r\n\t\t\t\t\t\tplaceholder='Enter the Size of Stack ...'\r\n\t\t\t\t\t\tonChange={onSizeChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Form.Select value={inputType} options={options} onChange={onTypeChange} />\r\n\t\t\t\t\t<Button.Group fluid>\r\n\t\t\t\t\t\t<Button type='button' negative onClick={onModalToggle}>\r\n\t\t\t\t\t\t\tClose\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button.Or />\r\n\t\t\t\t\t\t<Button type='submit' positive>\r\n\t\t\t\t\t\t\tCreate\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Button.Group>\r\n\t\t\t\t</Form>\r\n\t\t\t</Modal.Content>\r\n\t\t</Modal>\r\n\t</React.Fragment>\r\n);\r\n\r\nexport default StackCreatePresentation;\r\n","import React, { useState } from 'react';\r\n\r\nimport { getIcon, getColor, validTypes } from '../../services/logicFuncs';\r\n\r\nimport StackCreatePresentation from './StackCreate.presentation';\r\n\r\nconst StackCreate = ({ handleStackCreate }) => {\r\n\tconst [modalOpen, setModalOpen] = useState(false);\r\n\tconst [inputName, setInputName] = useState('');\r\n\tconst [inputType, setInputType] = useState(0);\r\n\tconst [inputSize, setInputSize] = useState(5);\r\n\r\n\tconst icon = getIcon(validTypes[inputType]);\r\n\tconst color = getColor(validTypes[inputType]);\r\n\tconst options = validTypes.map((type, index) => ({\r\n\t\tkey: index,\r\n\t\tvalue: index,\r\n\t\ttext: type.toUpperCase(),\r\n\t}));\r\n\r\n\tconst handleEvents = {\r\n\t\tonModalToggle: () => {\r\n\t\t\tsetModalOpen(!modalOpen);\r\n\t\t},\r\n\r\n\t\tonNameChange: (_, { value }) => {\r\n\t\t\tsetInputName(value);\r\n\t\t},\r\n\r\n\t\tonTypeChange: (_, { value }) => {\r\n\t\t\tsetInputType(value);\r\n\t\t},\r\n\r\n\t\tonSizeChange: (_, { value }) => {\r\n\t\t\tsetInputSize(Number(value));\r\n\t\t},\r\n\r\n\t\tonStackSubmit: () => {\r\n\t\t\thandleStackCreate(inputName, validTypes[inputType], inputSize);\r\n\t\t\tsetModalOpen(false);\r\n\t\t\tsetInputName('');\r\n\t\t\tsetInputType(0);\r\n\t\t\tsetInputSize(5);\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StackCreatePresentation\r\n\t\t\tmodalOpen={modalOpen}\r\n\t\t\tinputName={inputName}\r\n\t\t\tinputType={inputType}\r\n\t\t\tinputSize={inputSize}\r\n\t\t\ticon={icon}\r\n\t\t\tcolor={color}\r\n\t\t\toptions={options}\r\n\t\t\t{...handleEvents}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default StackCreate;\r\n","import React, { useState } from 'react';\r\nimport { Form, Icon, Header } from 'semantic-ui-react';\r\n\r\nimport { StyledButton, ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst StackOptions = ({ currentStack, handleStackPush, handleStackPop }) => {\r\n\tconst [pushInput, setPushInput] = useState('');\r\n\r\n\tconst onInputChange = (_, { value }) => {\r\n\t\tsetPushInput(value);\r\n\t};\r\n\r\n\tconst onStackPush = () => {\r\n\t\thandleStackPush(pushInput);\r\n\t\tsetPushInput('');\r\n\t};\r\n\r\n\tconst onStackPop = () => {\r\n\t\thandleStackPop();\r\n\t\tsetPushInput('');\r\n\t};\r\n\r\n\tlet inputDesign;\r\n\tif (currentStack.type === 'boolean')\r\n\t\tinputDesign = (\r\n\t\t\t<Form.Select\r\n\t\t\t\tfluid\r\n\t\t\t\tvalue={pushInput}\r\n\t\t\t\tplaceholder='Choosea Boolean Value'\r\n\t\t\t\toptions={[\r\n\t\t\t\t\t{ key: 0, text: 'TRUE', value: 'true' },\r\n\t\t\t\t\t{ key: 1, text: 'FALSE', value: 'false' },\r\n\t\t\t\t]}\r\n\t\t\t\tonChange={onInputChange}\r\n\t\t\t/>\r\n\t\t);\r\n\telse {\r\n\t\tinputDesign = (\r\n\t\t\t<Form.Input\r\n\t\t\t\tfluid\r\n\t\t\t\tvalue={pushInput}\r\n\t\t\t\ttype={currentStack.type === 'number' ? 'number' : 'text'}\r\n\t\t\t\tplaceholder='Enter an element ...'\r\n\t\t\t\tonChange={onInputChange}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ScrollDiv noScroll outset>\r\n\t\t\t<Header size='small'>\r\n\t\t\t\t<Icon name='cog' loading />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\tStack Operations\r\n\t\t\t\t\t<Header.Subheader>\r\n\t\t\t\t\t\tApply Push or Pop Operations on the Current Stack\r\n\t\t\t\t\t</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.Group widths='equal'>{inputDesign}</Form.Group>\r\n\t\t\t\t<Form.Group widths='equal'>\r\n\t\t\t\t\t<StyledButton\r\n\t\t\t\t\t\tfluid\r\n\t\t\t\t\t\ticon\r\n\t\t\t\t\t\tlabelPosition='right'\r\n\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\tonClick={onStackPop}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Icon name='angle double down' />\r\n\t\t\t\t\t\tPop\r\n\t\t\t\t\t</StyledButton>\r\n\t\t\t\t\t<StyledButton\r\n\t\t\t\t\t\tfluid\r\n\t\t\t\t\t\ticon\r\n\t\t\t\t\t\tlabelPosition='right'\r\n\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\tonClick={onStackPush}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Icon name='angle double up' />\r\n\t\t\t\t\t\tPush\r\n\t\t\t\t\t</StyledButton>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t</Form>\r\n\t\t</ScrollDiv>\r\n\t);\r\n};\r\n\r\nexport default StackOptions;\r\n","import React from 'react';\r\nimport { Header, Modal, Button, Icon } from 'semantic-ui-react';\r\n\r\nimport { StyledButton, ScrollDiv } from '../../services/StyledComponents';\r\n\r\nconst MessagesStackPresentation = ({\r\n\tmessageStack,\r\n\tarchiveStack,\r\n\temptyStack,\r\n\tmessageOpen,\r\n\tarchiveOpen,\r\n\tonClose,\r\n\tonMessageOpen,\r\n\tonArchiveOpen,\r\n\tonMessageArchive,\r\n}) => (\r\n\t<React.Fragment>\r\n\t\t<ScrollDiv noScroll outset>\r\n\t\t\t<Header size='small'>\r\n\t\t\t\t<Icon name='settings' />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\tMessages\r\n\t\t\t\t\t<Header.Subheader>Checkout Messages collected</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t<StyledButton\r\n\t\t\t\tfloated='left'\r\n\t\t\t\ticon='fork'\r\n\t\t\t\tcontent='Current Messages'\r\n\t\t\t\tlabel={{\r\n\t\t\t\t\tbasic: false,\r\n\t\t\t\t\tcolor: 'grey',\r\n\t\t\t\t\tpointing: 'left',\r\n\t\t\t\t\tcontent: messageStack.length,\r\n\t\t\t\t}}\r\n\t\t\t\tonClick={onMessageOpen}\r\n\t\t\t/>\r\n\t\t\t<StyledButton\r\n\t\t\t\tfloated='right'\r\n\t\t\t\ticon='inbox'\r\n\t\t\t\tcontent='Messages Archived'\r\n\t\t\t\tlabel={{\r\n\t\t\t\t\tbasic: false,\r\n\t\t\t\t\tcolor: 'grey',\r\n\t\t\t\t\tpointing: 'left',\r\n\t\t\t\t\tcontent: archiveStack.length,\r\n\t\t\t\t}}\r\n\t\t\t\tonClick={onArchiveOpen}\r\n\t\t\t/>\r\n\t\t</ScrollDiv>\r\n\r\n\t\t<Modal dimmer='blurring' open={messageOpen} centered={false}>\r\n\t\t\t<Modal.Header>Current Messages Collected</Modal.Header>\r\n\t\t\t<Modal.Content scrolling>\r\n\t\t\t\t<Modal.Description>\r\n\t\t\t\t\t<Header floated='right' size='small'>\r\n\t\t\t\t\t\tCheck out all the Current Messages\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t\t{messageStack.length > 0 ? messageStack : emptyStack}\r\n\t\t\t\t</Modal.Description>\r\n\t\t\t</Modal.Content>\r\n\t\t\t<Modal.Actions>\r\n\t\t\t\t<Button icon primary labelPosition='right' onClick={onMessageArchive}>\r\n\t\t\t\t\t<Icon name='chevron right' />\r\n\t\t\t\t\tArchive all the messages\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button negative onClick={onClose}>\r\n\t\t\t\t\tClose\r\n\t\t\t\t</Button>\r\n\t\t\t</Modal.Actions>\r\n\t\t</Modal>\r\n\t\t<Modal dimmer='blurring' open={archiveOpen} centered={false}>\r\n\t\t\t<Modal.Header>Current Messages Archived</Modal.Header>\r\n\t\t\t<Modal.Content scrolling>\r\n\t\t\t\t<Modal.Description>\r\n\t\t\t\t\t<Header floated='right' size='small'>\r\n\t\t\t\t\t\tCheck out all the Archived Messages\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t\t{archiveStack.length > 0 ? archiveStack : emptyStack}\r\n\t\t\t\t</Modal.Description>\r\n\t\t\t</Modal.Content>\r\n\t\t\t<Modal.Actions>\r\n\t\t\t\t<Button negative onClick={onClose}>\r\n\t\t\t\t\tClose\r\n\t\t\t\t</Button>\r\n\t\t\t</Modal.Actions>\r\n\t\t</Modal>\r\n\t</React.Fragment>\r\n);\r\n\r\nexport default MessagesStackPresentation;\r\n","import React, { useState } from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\nimport MessagesStackPresentation from './MessagesStack.presentation';\r\n\r\nconst MessageStack = ({\r\n\tcollectedMessages,\r\n\tarchivedMessages,\r\n\thandleMessageArchive,\r\n}) => {\r\n\tconst [messageOpen, setMessageOpen] = useState(false);\r\n\tconst [archiveOpen, setArchiveOpen] = useState(false);\r\n\r\n\tconst onClose = () => {\r\n\t\tsetMessageOpen(false);\r\n\t\tsetArchiveOpen(false);\r\n\t};\r\n\r\n\tconst onMessageOpen = () => {\r\n\t\tsetMessageOpen(true);\r\n\t\tsetArchiveOpen(false);\r\n\t};\r\n\r\n\tconst onArchiveOpen = () => {\r\n\t\tsetMessageOpen(false);\r\n\t\tsetArchiveOpen(true);\r\n\t};\r\n\r\n\tconst onMessageArchive = () => {\r\n\t\thandleMessageArchive();\r\n\t\tonClose();\r\n\t};\r\n\r\n\tconst renderMessages = stack =>\r\n\t\tstack.map((msg, index) => (\r\n\t\t\t<Message\r\n\t\t\t\tkey={index}\r\n\t\t\t\terror={msg.error === true}\r\n\t\t\t\tsuccess={msg.error !== true}\r\n\t\t\t\tsize='small'\r\n\t\t\t\ticon={msg.error === true ? 'question' : 'star'}\r\n\t\t\t\theader={msg.head}\r\n\t\t\t\tcontent={msg.body}\r\n\t\t\t/>\r\n\t\t));\r\n\r\n\tconst messageStack = renderMessages(collectedMessages);\r\n\tconst archiveStack = renderMessages(archivedMessages);\r\n\tconst emptyStack = (\r\n\t\t<Message\r\n\t\t\twarning\r\n\t\t\ticon='inbox'\r\n\t\t\tsize='small'\r\n\t\t\theader='No Messages Found'\r\n\t\t\tcontent='No new Messages are found'\r\n\t\t/>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<MessagesStackPresentation\r\n\t\t\tmessageStack={messageStack}\r\n\t\t\tarchiveStack={archiveStack}\r\n\t\t\temptyStack={emptyStack}\r\n\t\t\tmessageOpen={messageOpen}\r\n\t\t\tarchiveOpen={archiveOpen}\r\n\t\t\tonClose={onClose}\r\n\t\t\tonMessageOpen={onMessageOpen}\r\n\t\t\tonArchiveOpen={onArchiveOpen}\r\n\t\t\tonMessageArchive={onMessageArchive}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default MessageStack;\r\n","import React, { useState, useEffect } from 'react';\n\nimport Stack from '../../services/Stack';\nimport { isValidStackConfig, isValidPush } from '../../services/logicFuncs';\n\nimport { Grid, GridItem } from './styles';\nimport StackMenu from '../StacksMenu';\nimport VisualStack from '../VisualStack';\nimport StackCreate from '../StackCreate';\nimport StackOptions from '../StackOptions';\nimport MessageStack from '../MessagesStack';\n\nconst App = () => {\n\tconst [collectedMessages, setCollectedMessages] = useState([]);\n\tconst [archivedMessages, setArchivedMessages] = useState([]);\n\tconst [stackPos, setStackPos] = useState(0);\n\tconst [stackCollection, setStackCollection] = useState([\n\t\t{\n\t\t\tname: 'Default',\n\t\t\ttype: 'number',\n\t\t\tstack: new Stack(),\n\t\t},\n\t\t{\n\t\t\tname: 'Default',\n\t\t\ttype: 'string',\n\t\t\tstack: new Stack(),\n\t\t},\n\t\t{\n\t\t\tname: 'Default',\n\t\t\ttype: 'boolean',\n\t\t\tstack: new Stack(),\n\t\t},\n\t]);\n\n\tuseEffect(() => {\n\t\tconsole.groupCollapsed('Current Stack Config ...');\n\t\tconsole.log('Current Position :\\t', stackPos);\n\t\tconsole.log(stackCollection[stackPos]);\n\t\tconsole.groupEnd();\n\t}, [stackCollection, stackPos]);\n\n\tconst handleStackChange = index => {\n\t\tsetStackPos(index);\n\t};\n\n\tconst handleStackCreate = (name, type, size) => {\n\t\tconst messages = isValidStackConfig(name, type, size);\n\t\tif (messages.some(msg => msg.error === true)) {\n\t\t\tsetCollectedMessages([...collectedMessages, ...messages]);\n\t\t} else {\n\t\t\tsetStackCollection([\n\t\t\t\t...stackCollection,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t\tstack: new Stack(new Array(size).fill(null)),\n\t\t\t\t},\n\t\t\t]);\n\t\t\tsetCollectedMessages([\n\t\t\t\t...collectedMessages,\n\t\t\t\t{\n\t\t\t\t\thead: 'Stack Created Successfully',\n\t\t\t\t\tbody: `Created Stack ${name.toUpperCase()} of Type < ${type} >`,\n\t\t\t\t\terror: false,\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\t};\n\n\tconst handleStackPush = value => {\n\t\tconst messages = isValidPush(value, stackCollection[stackPos].type);\n\t\tif (messages.some(msg => msg.error === true)) {\n\t\t\tsetCollectedMessages([...collectedMessages, ...messages]);\n\t\t} else {\n\t\t\tconst newStack = new Stack(\n\t\t\t\tstackCollection[stackPos].stack.copy,\n\t\t\t\tstackCollection[stackPos].stack.top\n\t\t\t);\n\t\t\tif (newStack.push(value) === false) {\n\t\t\t\tsetCollectedMessages([\n\t\t\t\t\t...collectedMessages,\n\t\t\t\t\t{\n\t\t\t\t\t\thead: 'Stack is Full',\n\t\t\t\t\t\tbody: 'Cannot Push any more elements.',\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tsetStackCollection(\n\t\t\t\t\tstackCollection.map((el, index) => {\n\t\t\t\t\t\tif (index !== stackPos) return el;\n\t\t\t\t\t\treturn { ...el, stack: newStack };\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tsetCollectedMessages([\n\t\t\t\t\t...collectedMessages,\n\t\t\t\t\t{\n\t\t\t\t\t\thead: 'Element Pushed Successfully',\n\t\t\t\t\t\tbody: `Pushed element : ${value}`,\n\t\t\t\t\t\terror: false,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleStackPop = () => {\n\t\tconst newStack = new Stack(\n\t\t\tstackCollection[stackPos].stack.copy,\n\t\t\tstackCollection[stackPos].stack.top\n\t\t);\n\t\tconst value = newStack.pop();\n\t\tif (value === null) {\n\t\t\tsetCollectedMessages([\n\t\t\t\t...collectedMessages,\n\t\t\t\t{\n\t\t\t\t\thead: 'Stack is Empty',\n\t\t\t\t\tbody: 'Cannot Pop any more elements.',\n\t\t\t\t\terror: true,\n\t\t\t\t},\n\t\t\t]);\n\t\t} else {\n\t\t\tsetStackCollection(\n\t\t\t\tstackCollection.map((el, index) => {\n\t\t\t\t\tif (index !== stackPos) return el;\n\t\t\t\t\treturn { ...el, stack: newStack };\n\t\t\t\t})\n\t\t\t);\n\t\t\tsetCollectedMessages([\n\t\t\t\t...collectedMessages,\n\t\t\t\t{\n\t\t\t\t\thead: 'Element Popped Successfully',\n\t\t\t\t\tbody: `Popped element : ${value}`,\n\t\t\t\t\terror: false,\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\t};\n\n\tconst handleMessageArchive = () => {\n\t\tsetArchivedMessages([...archivedMessages, ...collectedMessages]);\n\t\tsetCollectedMessages([]);\n\t};\n\n\treturn (\n\t\t<Grid>\n\t\t\t<GridItem area='a'>\n\t\t\t\t<StackMenu\n\t\t\t\t\tstackPos={stackPos}\n\t\t\t\t\tstackCollection={stackCollection}\n\t\t\t\t\thandleStackChange={handleStackChange}\n\t\t\t\t/>\n\t\t\t</GridItem>\n\t\t\t<GridItem area='b'>\n\t\t\t\t<StackOptions\n\t\t\t\t\tcurrentStack={stackCollection[stackPos]}\n\t\t\t\t\thandleStackPush={handleStackPush}\n\t\t\t\t\thandleStackPop={handleStackPop}\n\t\t\t\t/>\n\t\t\t</GridItem>\n\t\t\t<GridItem area='c'>\n\t\t\t\t<VisualStack currentStack={stackCollection[stackPos]} />\n\t\t\t</GridItem>\n\t\t\t<GridItem area='d'>\n\t\t\t\t<StackCreate handleStackCreate={handleStackCreate} />\n\t\t\t</GridItem>\n\t\t\t<GridItem area='e'>\n\t\t\t\t<MessageStack\n\t\t\t\t\tcollectedMessages={collectedMessages}\n\t\t\t\t\tarchivedMessages={archivedMessages}\n\t\t\t\t\thandleMessageArchive={handleMessageArchive}\n\t\t\t\t/>\n\t\t\t</GridItem>\n\t\t</Grid>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport App from './components/App';\n\nconst GlobalStyle = createGlobalStyle`\n   * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n   }\n\n   body {\n      width: 100vw;\n      height: 100vh;\n   }\n\n   #root {\n      width: 100%;\n      height: 100%;\n   }\n`;\n\nReactDOM.render(\n\t<React.Fragment>\n\t\t<GlobalStyle />\n\t\t<App />\n\t</React.Fragment>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}