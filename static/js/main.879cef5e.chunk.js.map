{"version":3,"sources":["services/StyledComponents.js","services/Stack.js","services/logicFuncs.js","components/App/styles.js","components/StacksMenu.js","components/VisualStack.js","components/StackCreate/StackCreate.presentation.js","components/StackCreate/index.js","components/StackOptions.js","components/MessagesStack/MessagesStack.presentation.js","components/MessagesStack/index.js","components/App/index.js","index.js"],"names":["ScrollDiv","styled","props","outset","noScroll","padding","StyledButton","Button","Stack","array","Array","fill","top","this","stack","size","length","value","isFull","isEmpty","validTypes","getIcon","type","getColor","Grid","GridItem","area","StacksMenu","stackCollection","handleStackChange","stackPos","dropdownOptions","map","index","icon","key","text","name","Header","Icon","Content","Subheader","Dropdown","placeholder","fluid","selection","options","onChange","_","VisualStack","currentStack","color","copy","filter","el","mappedStack","Segment","padded","raised","inverted","secondary","textAlign","emptyStack","Message","floating","error","header","content","toUpperCase","as","StackCreatePresentation","modalOpen","inputName","inputType","inputSize","onModalToggle","onNameChange","onTypeChange","onSizeChange","onStackSubmit","Fragment","primary","labelPosition","onClick","animated","visible","hidden","Modal","dimmer","open","centered","Form","onSubmit","Input","label","circular","link","min","max","Select","Group","negative","Or","positive","StackCreate","handleStackCreate","useState","setModalOpen","setInputName","setInputType","setInputSize","handleEvents","Number","StackOptions","handleStackPush","handleStackPop","pushInput","setPushInput","onInputChange","input","floated","MessagesStackPresentation","messageStack","archiveStack","messageOpen","archiveOpen","basic","pointing","onMessageOpen","onArchiveOpen","scrolling","Description","Actions","onMessageArchive","onClose","MessageStack","collectedMessages","archivedMessages","handleMessageArchive","setMessageOpen","setArchiveOpen","renderMessages","msg","success","head","body","warning","App","setCollectedMessages","setArchivedMessages","setStackPos","setStackCollection","useEffect","console","groupCollapsed","log","groupEnd","val","messages","test","some","newStack","push","pop","errors","toLowerCase","includes","isValidStackConfig","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.879cef5e.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nexport const background = `#c1b8c1`;\r\nexport const backgroundHover = `#c6bec7`;\r\n\r\nexport const outsetShadow = `13px 13px 35px #9c959c, -13px -13px 35px #e6dbe6`;\r\nexport const insetShadow = `inset 13px 13px 35px #9c959c, inset -13px -13px 35px #e6dbe6`;\r\n\r\nexport const outsetShadowIntense = `5px 5px 21px #615c61, -5px -5px 21px #ffffff`;\r\nexport const insetShadowIntense = `inset 5px 5px 21px #615c61, inset -5px -5px 21px #ffffff`;\r\n\r\nexport const ScrollDiv = styled('div')`\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\r\n\tborder-radius: 10px;\r\n\tbackground: ${background};\r\n\tbox-shadow: ${props => (props.outset ? outsetShadow : insetShadow)};\r\n\r\n\toverflow-y: ${props => (props.noScroll ? 'visible' : 'scroll')};\r\n\tpadding: ${props => (props.padding ? props.padding * 100 : 3)}%;\r\n`;\r\n\r\nexport const StyledButton = styled(Button)`\r\n\tborder-radius: 5px !important;\r\n\tcolor: black !important;\r\n\tbackground: ${background} !important;\r\n\tbox-shadow: ${outsetShadowIntense} !important;\r\n\r\n\t&:hover {\r\n\t\tbackground: ${backgroundHover} !important;\r\n\t}\r\n\r\n\t&:active {\r\n\t\tbox-shadow: ${insetShadowIntense} !important;\r\n\t}\r\n`;\r\n","class Stack {\r\n\tconstructor(array = new Array(10).fill(null), top = -1) {\r\n\t\tthis.stack = array;\r\n\t\tthis.size = array.length;\r\n\t\tthis.top = top;\r\n\t}\r\n\r\n\tisFull() {\r\n\t\treturn this.top === this.size - 1;\r\n\t}\r\n\r\n\tisEmpty() {\r\n\t\treturn this.top === -1;\r\n\t}\r\n\r\n\tpush(value) {\r\n\t\tif (!this.isFull()) {\r\n\t\t\tthis.stack[++this.top] = value;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpop() {\r\n\t\tif (!this.isEmpty()) {\r\n\t\t\tconst value = this.stack[this.top];\r\n\t\t\tthis.stack[this.top--] = null;\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tget copy() {\r\n\t\treturn [...this.stack];\r\n\t}\r\n}\r\n\r\nexport default Stack;\r\n","export const validTypes = ['number', 'string', 'boolean'];\r\n\r\nexport const isValidType = type => {\r\n\tif (validTypes.includes(type.toLowerCase())) return true;\r\n\treturn false;\r\n};\r\n\r\nexport const isValidPush = (val, type) => {\r\n\tconst NumberRegExp = /^(\\d)+(.(\\d)+)?$/i;\r\n\r\n\tif (type === 'number')\r\n\t\treturn NumberRegExp.test(val)\r\n\t\t\t? []\r\n\t\t\t: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thead: 'Invalid Input of Type Number',\r\n\t\t\t\t\t\tbody: 'Element to push should be a Number',\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t  ];\r\n\tif (type === 'boolean')\r\n\t\treturn val === 'true' || val === 'false'\r\n\t\t\t? []\r\n\t\t\t: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thead: 'Invalid Input of Type Boolean',\r\n\t\t\t\t\t\tbody: 'Element to push should be a Boolean',\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t  ];\r\n\tif (type === 'string')\r\n\t\treturn typeof val === 'string'\r\n\t\t\t? []\r\n\t\t\t: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thead: 'Invalid Input of Type String',\r\n\t\t\t\t\t\tbody: 'Element to push should be a String',\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t  ];\r\n};\r\n\r\nexport const isValidStackConfig = (name, type, size) => {\r\n\tconst errors = [];\r\n\tif (name.length <= 0 || name.length >= 20 || name.toLowerCase() === 'default') {\r\n\t\terrors.push({\r\n\t\t\thead: 'Invalid Name for a Stack',\r\n\t\t\tbody: 'Enter a Valid Name that is not \"Default\" or \"\"',\r\n\t\t\terror: true,\r\n\t\t});\r\n\t}\r\n\tif (!validTypes.includes(type)) {\r\n\t\terrors.push({\r\n\t\t\thead: 'Invlid Type for a Stack',\r\n\t\t\tbody: 'A Stack can only have a Type of Number, String or Boolean',\r\n\t\t\terror: true,\r\n\t\t});\r\n\t}\r\n\tif (size <= 0 || size >= 20) {\r\n\t\terrors.push({\r\n\t\t\thead: 'Invlid Size for a Stack',\r\n\t\t\tbody: 'Size of Stack cannot Exceed 20 and cannot be less than 0',\r\n\t\t\terror: true,\r\n\t\t});\r\n\t}\r\n\treturn errors;\r\n};\r\n\r\nexport const getIcon = type => {\r\n\tswitch (type) {\r\n\t\tcase 'number':\r\n\t\t\treturn 'sort numeric up';\r\n\t\tcase 'string':\r\n\t\t\treturn 'sort alphabet up';\r\n\t\tcase 'boolean':\r\n\t\t\treturn 'sort';\r\n\t\tdefault:\r\n\t\t\treturn 'delete';\r\n\t}\r\n};\r\n\r\nexport const getColor = type => {\r\n\tswitch (type) {\r\n\t\tcase 'number':\r\n\t\t\treturn 'orange';\r\n\t\tcase 'string':\r\n\t\t\treturn 'green';\r\n\t\tcase 'boolean':\r\n\t\t\treturn 'blue';\r\n\t\tdefault:\r\n\t\t\treturn 'red';\r\n\t}\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Grid = styled('div')`\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tpadding: 0.2%;\r\n\tdisplay: grid;\r\n\tgrid-template-rows: repeat(10, 1fr);\r\n\tgrid-template-columns: repeat(10, 1fr);\r\n\tgrid-gap: 1.5%;\r\n\tgrid-template-areas:\r\n\t\t'a a a a a a c c c c'\r\n\t\t'a a a a a a c c c c'\r\n\t\t'x x x x x x c c c c'\r\n\t\t'b b b b b b c c c c'\r\n\t\t'b b b b b b c c c c'\r\n\t\t'b b b b b b c c c c'\r\n\t\t'y y y y y y c c c c'\r\n\t\t'e e e e e e c c c c'\r\n\t\t'e e e e e e d d d d'\r\n\t\t'z z z z z z d d d d';\r\n`;\r\nexport const GridItem = styled('div')`\r\n\tgrid-area: ${({ area }) => area};\r\n`;\r\n","import React from 'react';\r\nimport { Dropdown, Header, Icon } from 'semantic-ui-react';\r\n\r\nimport { getIcon } from '../services/logicFuncs';\r\nimport { ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst StacksMenu = ({ stackCollection, handleStackChange, stackPos }) => {\r\n\tconst dropdownOptions = stackCollection.map((stack, index) => {\r\n\t\tconst icon = getIcon(stack.type);\r\n\r\n\t\treturn {\r\n\t\t\tkey: index,\r\n\t\t\tvalue: index,\r\n\t\t\ttext: `${stack.name} < ${stack.type} >`,\r\n\t\t\ticon: icon,\r\n\t\t};\r\n\t});\r\n\r\n\tconst onStackChange = (_, { value }) => {\r\n\t\thandleStackChange(value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ScrollDiv noScroll outset>\r\n\t\t\t<Header size='small'>\r\n\t\t\t\t<Icon name='outdent' />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\tChoose a Stack\r\n\t\t\t\t\t<Header.Subheader>Choose one out of the following Stacks</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t<Dropdown\r\n\t\t\t\tvalue={stackPos}\r\n\t\t\t\tplaceholder='Select a Stack'\r\n\t\t\t\tfluid\r\n\t\t\t\tselection\r\n\t\t\t\toptions={dropdownOptions}\r\n\t\t\t\tonChange={onStackChange}\r\n\t\t\t/>\r\n\t\t</ScrollDiv>\r\n\t);\r\n};\r\n\r\nexport default StacksMenu;\r\n","import React from 'react';\r\nimport { Segment, Message, Header, Icon } from 'semantic-ui-react';\r\n\r\nimport { getIcon, getColor } from '../services/logicFuncs';\r\nimport { ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst VisualStack = ({ currentStack }) => {\r\n\tconst icon = getIcon(currentStack.type);\r\n\tconst color = getColor(currentStack.type);\r\n\r\n\tconst stack = currentStack.stack.copy.filter(el => el !== null);\r\n\tconst mappedStack = stack.map((el, index) => {\r\n\t\treturn (\r\n\t\t\t<Segment\r\n\t\t\t\tkey={index}\r\n\t\t\t\tpadded\r\n\t\t\t\traised\r\n\t\t\t\tinverted\r\n\t\t\t\tsecondary\r\n\t\t\t\tcolor={color}\r\n\t\t\t\ttextAlign='center'\r\n\t\t\t>\r\n\t\t\t\t{el ? el : 'null'}\r\n\t\t\t</Segment>\r\n\t\t);\r\n\t});\r\n\tconst emptyStack = (\r\n\t\t<Message\r\n\t\t\tfloating\r\n\t\t\terror\r\n\t\t\tsize='small'\r\n\t\t\ticon='crosshairs'\r\n\t\t\theader='Empty Stack'\r\n\t\t\tcontent={`${currentStack.name.toUpperCase()} Stack is empty .`}\r\n\t\t/>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<ScrollDiv>\r\n\t\t\t<Header as='h2' color={color}>\r\n\t\t\t\t<Icon name={icon} />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\t{currentStack.name.toUpperCase()} Stack\r\n\t\t\t\t\t<Header.Subheader>Type : {currentStack.type}</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t{stack.length > 0 ? mappedStack : emptyStack}\r\n\t\t</ScrollDiv>\r\n\t);\r\n};\r\n\r\nexport default VisualStack;\r\n","import React from 'react';\r\nimport { Icon, Button, Form, Modal, Header } from 'semantic-ui-react';\r\n\r\nimport { StyledButton, ScrollDiv } from '../../services/StyledComponents';\r\n\r\nconst StackCreatePresentation = ({\r\n\tmodalOpen,\r\n\tinputName,\r\n\tinputType,\r\n\tinputSize,\r\n\ticon,\r\n\tcolor,\r\n\toptions,\r\n\tonModalToggle,\r\n\tonNameChange,\r\n\tonTypeChange,\r\n\tonSizeChange,\r\n\tonStackSubmit,\r\n}) => (\r\n\t<React.Fragment>\r\n\t\t<ScrollDiv noScroll>\r\n\t\t\t<Header size='small'>\r\n\t\t\t\t<Icon name='paper plane' />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\tCreate a New Stack\r\n\t\t\t\t\t<Header.Subheader>Initialise an Empty Stack with a Name</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t<StyledButton\r\n\t\t\t\ticon\r\n\t\t\t\tfluid\r\n\t\t\t\tprimary\r\n\t\t\t\tlabelPosition='right'\r\n\t\t\t\tonClick={onModalToggle}\r\n\t\t\t\tanimated='fade'\r\n\t\t\t>\r\n\t\t\t\t<Icon name='upload' />\r\n\t\t\t\t<Button.Content visible>Create an Empty Stack</Button.Content>\r\n\t\t\t\t<Button.Content hidden>\r\n\t\t\t\t\tClick Here to Create a New Empty Stack\r\n\t\t\t\t</Button.Content>\r\n\t\t\t</StyledButton>\r\n\t\t</ScrollDiv>\r\n\t\t<Modal dimmer='blurring' open={modalOpen} centered={false}>\r\n\t\t\t<Modal.Header>Stack Creation Form</Modal.Header>\r\n\t\t\t<Modal.Content>\r\n\t\t\t\t<Form onSubmit={onStackSubmit}>\r\n\t\t\t\t\t<Form.Input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tvalue={inputName}\r\n\t\t\t\t\t\tfluid\r\n\t\t\t\t\t\tlabel='Stack Name'\r\n\t\t\t\t\t\tplaceholder='Enter a Stack Name ...'\r\n\t\t\t\t\t\ticon={<Icon name={icon} color={color} inverted circular link />}\r\n\t\t\t\t\t\tonChange={onNameChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Form.Input\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\tmax={20}\r\n\t\t\t\t\t\tvalue={inputSize}\r\n\t\t\t\t\t\tfluid\r\n\t\t\t\t\t\tlabel='Stack Size'\r\n\t\t\t\t\t\tplaceholder='Enter the Size of Stack ...'\r\n\t\t\t\t\t\tonChange={onSizeChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Form.Select value={inputType} options={options} onChange={onTypeChange} />\r\n\t\t\t\t\t<Button.Group fluid>\r\n\t\t\t\t\t\t<Button type='button' negative onClick={onModalToggle}>\r\n\t\t\t\t\t\t\tClose\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button.Or />\r\n\t\t\t\t\t\t<Button type='submit' positive>\r\n\t\t\t\t\t\t\tCreate\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Button.Group>\r\n\t\t\t\t</Form>\r\n\t\t\t</Modal.Content>\r\n\t\t</Modal>\r\n\t</React.Fragment>\r\n);\r\n\r\nexport default StackCreatePresentation;\r\n","import React, { useState } from 'react';\r\n\r\nimport { getIcon, getColor, validTypes } from '../../services/logicFuncs';\r\n\r\nimport StackCreatePresentation from './StackCreate.presentation';\r\n\r\nconst StackCreate = ({ handleStackCreate }) => {\r\n\tconst [modalOpen, setModalOpen] = useState(false);\r\n\tconst [inputName, setInputName] = useState('');\r\n\tconst [inputType, setInputType] = useState(0);\r\n\tconst [inputSize, setInputSize] = useState(5);\r\n\r\n\tconst icon = getIcon(validTypes[inputType]);\r\n\tconst color = getColor(validTypes[inputType]);\r\n\tconst options = validTypes.map((type, index) => ({\r\n\t\tkey: index,\r\n\t\tvalue: index,\r\n\t\ttext: type.toUpperCase(),\r\n\t}));\r\n\r\n\tconst handleEvents = {\r\n\t\tonModalToggle: () => {\r\n\t\t\tsetModalOpen(!modalOpen);\r\n\t\t},\r\n\r\n\t\tonNameChange: (_, { value }) => {\r\n\t\t\tsetInputName(value);\r\n\t\t},\r\n\r\n\t\tonTypeChange: (_, { value }) => {\r\n\t\t\tsetInputType(value);\r\n\t\t},\r\n\r\n\t\tonSizeChange: (_, { value }) => {\r\n\t\t\tsetInputSize(Number(value));\r\n\t\t},\r\n\r\n\t\tonStackSubmit: () => {\r\n\t\t\thandleStackCreate(inputName, validTypes[inputType], inputSize);\r\n\t\t\tsetModalOpen(false);\r\n\t\t\tsetInputName('');\r\n\t\t\tsetInputType(0);\r\n\t\t\tsetInputSize(5);\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StackCreatePresentation\r\n\t\t\tmodalOpen={modalOpen}\r\n\t\t\tinputName={inputName}\r\n\t\t\tinputType={inputType}\r\n\t\t\tinputSize={inputSize}\r\n\t\t\ticon={icon}\r\n\t\t\tcolor={color}\r\n\t\t\toptions={options}\r\n\t\t\t{...handleEvents}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default StackCreate;\r\n","import React, { useState } from 'react';\r\nimport { Form, Icon } from 'semantic-ui-react';\r\n\r\nimport { StyledButton, ScrollDiv } from '../services/StyledComponents';\r\n\r\nconst StackOptions = ({ currentStack, handleStackPush, handleStackPop }) => {\r\n\tconst [pushInput, setPushInput] = useState('');\r\n\r\n\tconst onInputChange = (_, { value }) => {\r\n\t\tsetPushInput(value);\r\n\t};\r\n\r\n\tconst onStackPush = () => {\r\n\t\thandleStackPush(pushInput);\r\n\t\tsetPushInput('');\r\n\t};\r\n\r\n\tconst onStackPop = () => {\r\n\t\thandleStackPop();\r\n\t\tsetPushInput('');\r\n\t};\r\n\r\n\tconst input =\r\n\t\tcurrentStack.type === 'boolean' ? (\r\n\t\t\t<Form.Select\r\n\t\t\t\tfluid\r\n\t\t\t\tvalue={pushInput}\r\n\t\t\t\tlabel='Push into Current Stack'\r\n\t\t\t\tplaceholder='Choosea Boolean Value'\r\n\t\t\t\toptions={[\r\n\t\t\t\t\t{ key: 0, text: 'TRUE', value: 'true' },\r\n\t\t\t\t\t{ key: 1, text: 'FALSE', value: 'false' },\r\n\t\t\t\t]}\r\n\t\t\t\tonChange={onInputChange}\r\n\t\t\t/>\r\n\t\t) : (\r\n\t\t\t<Form.Input\r\n\t\t\t\tfluid\r\n\t\t\t\tvalue={pushInput}\r\n\t\t\t\ttype={currentStack.type === 'number' ? 'number' : 'text'}\r\n\t\t\t\tlabel='Push into Current Stack'\r\n\t\t\t\tplaceholder='Enter an element ...'\r\n\t\t\t\ticon={<Icon name='inbox' color='violet' inverted circular link />}\r\n\t\t\t\tonChange={onInputChange}\r\n\t\t\t/>\r\n\t\t);\r\n\r\n\treturn (\r\n\t\t<ScrollDiv noScroll outset>\r\n\t\t\t<Form onSubmit={onStackPush}>\r\n\t\t\t\t{input}\r\n\t\t\t\t<StyledButton floated='left' type='button' onClick={onStackPop}>\r\n\t\t\t\t\tPop\r\n\t\t\t\t</StyledButton>\r\n\t\t\t\t<StyledButton floated='right' type='submit'>\r\n\t\t\t\t\tPush\r\n\t\t\t\t</StyledButton>\r\n\t\t\t</Form>\r\n\t\t</ScrollDiv>\r\n\t);\r\n};\r\n\r\nexport default StackOptions;\r\n","import React from 'react';\r\nimport { Header, Modal, Button, Icon } from 'semantic-ui-react';\r\n\r\nimport { StyledButton, ScrollDiv } from '../../services/StyledComponents';\r\n\r\nconst MessagesStackPresentation = ({\r\n\tmessageStack,\r\n\tarchiveStack,\r\n\temptyStack,\r\n\tmessageOpen,\r\n\tarchiveOpen,\r\n\thandleEvents,\r\n}) => (\r\n\t<React.Fragment>\r\n\t\t<ScrollDiv noScroll outset>\r\n\t\t\t<Header size='small'>\r\n\t\t\t\t<Icon name='settings' />\r\n\t\t\t\t<Header.Content>\r\n\t\t\t\t\tMessages\r\n\t\t\t\t\t<Header.Subheader>Checkout Messages collected</Header.Subheader>\r\n\t\t\t\t</Header.Content>\r\n\t\t\t</Header>\r\n\t\t\t<StyledButton\r\n\t\t\t\tfloated='left'\r\n\t\t\t\ticon='fork'\r\n\t\t\t\tcontent='Current Messages'\r\n\t\t\t\tlabel={{\r\n\t\t\t\t\tbasic: false,\r\n\t\t\t\t\tcolor: 'grey',\r\n\t\t\t\t\tpointing: 'left',\r\n\t\t\t\t\tcontent: messageStack.length,\r\n\t\t\t\t}}\r\n\t\t\t\tonClick={handleEvents.onMessageOpen}\r\n\t\t\t/>\r\n\t\t\t<StyledButton\r\n\t\t\t\tfloated='right'\r\n\t\t\t\ticon='inbox'\r\n\t\t\t\tcontent='Messages Archived'\r\n\t\t\t\tlabel={{\r\n\t\t\t\t\tbasic: false,\r\n\t\t\t\t\tcolor: 'grey',\r\n\t\t\t\t\tpointing: 'left',\r\n\t\t\t\t\tcontent: archiveStack.length,\r\n\t\t\t\t}}\r\n\t\t\t\tonClick={handleEvents.onArchiveOpen}\r\n\t\t\t/>\r\n\t\t</ScrollDiv>\r\n\r\n\t\t<Modal dimmer='blurring' open={messageOpen} centered={false}>\r\n\t\t\t<Modal.Header>Current Messages Collected</Modal.Header>\r\n\t\t\t<Modal.Content scrolling>\r\n\t\t\t\t<Modal.Description>\r\n\t\t\t\t\t<Header floated='right' size='small'>\r\n\t\t\t\t\t\tCheck out all the Current Messages\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t\t{messageStack.length > 0 ? messageStack : emptyStack}\r\n\t\t\t\t</Modal.Description>\r\n\t\t\t</Modal.Content>\r\n\t\t\t<Modal.Actions>\r\n\t\t\t\t<Button\r\n\t\t\t\t\ticon\r\n\t\t\t\t\tprimary\r\n\t\t\t\t\tlabelPosition='right'\r\n\t\t\t\t\tonClick={handleEvents.onMessageArchive}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Icon name='chevron right' />\r\n\t\t\t\t\tArchive all the messages\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button negative onClick={handleEvents.onClose}>\r\n\t\t\t\t\tClose\r\n\t\t\t\t</Button>\r\n\t\t\t</Modal.Actions>\r\n\t\t</Modal>\r\n\t\t<Modal dimmer='blurring' open={archiveOpen} centered={false}>\r\n\t\t\t<Modal.Header>Current Messages Archived</Modal.Header>\r\n\t\t\t<Modal.Content scrolling>\r\n\t\t\t\t<Modal.Description>\r\n\t\t\t\t\t<Header floated='right' size='small'>\r\n\t\t\t\t\t\tCheck out all the Archived Messages\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t\t{archiveStack.length > 0 ? archiveStack : emptyStack}\r\n\t\t\t\t</Modal.Description>\r\n\t\t\t</Modal.Content>\r\n\t\t\t<Modal.Actions>\r\n\t\t\t\t<Button negative onClick={handleEvents.onClose}>\r\n\t\t\t\t\tClose\r\n\t\t\t\t</Button>\r\n\t\t\t</Modal.Actions>\r\n\t\t</Modal>\r\n\t</React.Fragment>\r\n);\r\n\r\nexport default MessagesStackPresentation;\r\n","import React, { useState } from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\nimport MessagesStackPresentation from './MessagesStack.presentation';\r\n\r\nconst MessageStack = ({\r\n\tcollectedMessages,\r\n\tarchivedMessages,\r\n\thandleMessageArchive,\r\n}) => {\r\n\tconst [messageOpen, setMessageOpen] = useState(false);\r\n\tconst [archiveOpen, setArchiveOpen] = useState(false);\r\n\r\n\tconst handleEvents = {\r\n\t\tonClose: () => {\r\n\t\t\tsetMessageOpen(false);\r\n\t\t\tsetArchiveOpen(false);\r\n\t\t},\r\n\r\n\t\tonMessageOpen: () => {\r\n\t\t\tsetMessageOpen(true);\r\n\t\t\tsetArchiveOpen(false);\r\n\t\t},\r\n\r\n\t\tonArchiveOpen: () => {\r\n\t\t\tsetMessageOpen(false);\r\n\t\t\tsetArchiveOpen(true);\r\n\t\t},\r\n\r\n\t\tonMessageArchive: () => {\r\n\t\t\thandleMessageArchive();\r\n\t\t},\r\n\t};\r\n\r\n\tconst renderMessages = stack =>\r\n\t\tstack.map((msg, index) => (\r\n\t\t\t<Message\r\n\t\t\t\tkey={index}\r\n\t\t\t\terror={msg.error === true}\r\n\t\t\t\tsuccess={msg.error !== true}\r\n\t\t\t\tsize='small'\r\n\t\t\t\ticon={msg.error === true ? 'question' : 'star'}\r\n\t\t\t\theader={msg.head}\r\n\t\t\t\tcontent={msg.body}\r\n\t\t\t/>\r\n\t\t));\r\n\r\n\tconst messageStack = renderMessages(collectedMessages);\r\n\tconst archiveStack = renderMessages(archivedMessages);\r\n\tconst emptyStack = (\r\n\t\t<Message\r\n\t\t\twarning\r\n\t\t\ticon='inbox'\r\n\t\t\tsize='small'\r\n\t\t\theader='No Messages Found'\r\n\t\t\tcontent='No new Messages are found'\r\n\t\t/>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<MessagesStackPresentation\r\n\t\t\tmessageStack={messageStack}\r\n\t\t\tarchiveStack={archiveStack}\r\n\t\t\temptyStack={emptyStack}\r\n\t\t\tmessageOpen={messageOpen}\r\n\t\t\tarchiveOpen={archiveOpen}\r\n\t\t\thandleEvents={handleEvents}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default MessageStack;\r\n","import React, { useState, useEffect } from 'react';\n\nimport Stack from '../../services/Stack';\nimport { isValidStackConfig, isValidPush } from '../../services/logicFuncs';\n\nimport { Grid, GridItem } from './styles';\nimport StackMenu from '../StacksMenu';\nimport VisualStack from '../VisualStack';\nimport StackCreate from '../StackCreate';\nimport StackOptions from '../StackOptions';\nimport MessageStack from '../MessagesStack';\n\nconst App = () => {\n\tconst [collectedMessages, setCollectedMessages] = useState([]);\n\tconst [archivedMessages, setArchivedMessages] = useState([]);\n\tconst [stackPos, setStackPos] = useState(0);\n\tconst [stackCollection, setStackCollection] = useState([\n\t\t{\n\t\t\tname: 'Default',\n\t\t\ttype: 'number',\n\t\t\tstack: new Stack(),\n\t\t},\n\t\t{\n\t\t\tname: 'Default',\n\t\t\ttype: 'string',\n\t\t\tstack: new Stack(),\n\t\t},\n\t\t{\n\t\t\tname: 'Default',\n\t\t\ttype: 'boolean',\n\t\t\tstack: new Stack(),\n\t\t},\n\t]);\n\n\tuseEffect(() => {\n\t\tconsole.groupCollapsed('Current Stack Config ...');\n\t\tconsole.log('Current Position :\\t', stackPos);\n\t\tconsole.log(stackCollection[stackPos]);\n\t\tconsole.groupEnd();\n\t}, [stackCollection, stackPos]);\n\n\tconst handleStackChange = index => {\n\t\tsetStackPos(index);\n\t};\n\n\tconst handleStackCreate = (name, type, size) => {\n\t\tconst messages = isValidStackConfig(name, type, size);\n\t\tif (messages.some(msg => msg.error === true)) {\n\t\t\tsetCollectedMessages([...collectedMessages, ...messages]);\n\t\t} else {\n\t\t\tsetStackCollection([\n\t\t\t\t...stackCollection,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t\tstack: new Stack(new Array(size).fill(null)),\n\t\t\t\t},\n\t\t\t]);\n\t\t\tsetCollectedMessages([\n\t\t\t\t...collectedMessages,\n\t\t\t\t{\n\t\t\t\t\thead: 'Stack Created Successfully',\n\t\t\t\t\tbody: `Created Stack ${name.toUpperCase()} of Type < ${type} >`,\n\t\t\t\t\terror: false,\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\t};\n\n\tconst handleStackPush = value => {\n\t\tconst messages = isValidPush(value, stackCollection[stackPos].type);\n\t\tif (messages.some(msg => msg.error === true)) {\n\t\t\tsetCollectedMessages([...collectedMessages, ...messages]);\n\t\t} else {\n\t\t\tconst newStack = new Stack(\n\t\t\t\tstackCollection[stackPos].stack.copy,\n\t\t\t\tstackCollection[stackPos].stack.top\n\t\t\t);\n\t\t\tif (newStack.push(value) === false) {\n\t\t\t\tsetCollectedMessages([\n\t\t\t\t\t...collectedMessages,\n\t\t\t\t\t{\n\t\t\t\t\t\thead: 'Stack is Full',\n\t\t\t\t\t\tbody: 'Cannot Push any more elements.',\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tsetStackCollection(\n\t\t\t\t\tstackCollection.map((el, index) => {\n\t\t\t\t\t\tif (index !== stackPos) return el;\n\t\t\t\t\t\treturn { ...el, stack: newStack };\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tsetCollectedMessages([\n\t\t\t\t\t...collectedMessages,\n\t\t\t\t\t{\n\t\t\t\t\t\thead: 'Element Pushed Successfully',\n\t\t\t\t\t\tbody: `Pushed element : ${value}`,\n\t\t\t\t\t\terror: false,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleStackPop = () => {\n\t\tconst newStack = new Stack(\n\t\t\tstackCollection[stackPos].stack.copy,\n\t\t\tstackCollection[stackPos].stack.top\n\t\t);\n\t\tconst value = newStack.pop();\n\t\tif (value === null) {\n\t\t\tsetCollectedMessages([\n\t\t\t\t...collectedMessages,\n\t\t\t\t{\n\t\t\t\t\thead: 'Stack is Empty',\n\t\t\t\t\tbody: 'Cannot Pop any more elements.',\n\t\t\t\t\terror: true,\n\t\t\t\t},\n\t\t\t]);\n\t\t} else {\n\t\t\tsetStackCollection(\n\t\t\t\tstackCollection.map((el, index) => {\n\t\t\t\t\tif (index !== stackPos) return el;\n\t\t\t\t\treturn { ...el, stack: newStack };\n\t\t\t\t})\n\t\t\t);\n\t\t\tsetCollectedMessages([\n\t\t\t\t...collectedMessages,\n\t\t\t\t{\n\t\t\t\t\thead: 'Element Popped Successfully',\n\t\t\t\t\tbody: `Popped element : ${value}`,\n\t\t\t\t\terror: false,\n\t\t\t\t},\n\t\t\t]);\n\t\t}\n\t};\n\n\tconst handleMessageArchive = () => {\n\t\tsetArchivedMessages([...archivedMessages, ...collectedMessages]);\n\t\tsetCollectedMessages([]);\n\t};\n\n\treturn (\n\t\t<Grid>\n\t\t\t<GridItem area='a'>\n\t\t\t\t<StackMenu\n\t\t\t\t\tstackPos={stackPos}\n\t\t\t\t\tstackCollection={stackCollection}\n\t\t\t\t\thandleStackChange={handleStackChange}\n\t\t\t\t/>\n\t\t\t</GridItem>\n\t\t\t<GridItem area='b'>\n\t\t\t\t<StackOptions\n\t\t\t\t\tcurrentStack={stackCollection[stackPos]}\n\t\t\t\t\thandleStackPush={handleStackPush}\n\t\t\t\t\thandleStackPop={handleStackPop}\n\t\t\t\t/>\n\t\t\t</GridItem>\n\t\t\t<GridItem area='c'>\n\t\t\t\t<VisualStack currentStack={stackCollection[stackPos]} />\n\t\t\t</GridItem>\n\t\t\t<GridItem area='d'>\n\t\t\t\t<StackCreate handleStackCreate={handleStackCreate} />\n\t\t\t</GridItem>\n\t\t\t<GridItem area='e'>\n\t\t\t\t<MessageStack\n\t\t\t\t\tcollectedMessages={collectedMessages}\n\t\t\t\t\tarchivedMessages={archivedMessages}\n\t\t\t\t\thandleMessageArchive={handleMessageArchive}\n\t\t\t\t/>\n\t\t\t</GridItem>\n\t\t</Grid>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { background } from './services/StyledComponents';\n\nimport App from './components/App';\n\nconst GlobalStyle = createGlobalStyle`\n   * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n   }\n\n   body {\n      width: 100vw;\n      height: 100vh;\n   }\n\n   #root {\n      width: 100%;\n      height: 100%;\n      padding: 10px;\n      background: ${background};\n   }\n`;\n\nReactDOM.render(\n\t<React.Fragment>\n\t\t<GlobalStyle />\n\t\t<App />\n\t</React.Fragment>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}